{"version":3,"file":"static/js/805.f7651d08.chunk.js","mappings":"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","sources":["redux/selectors.js","hooks/useContact.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectFilter = state => state.filter.value;\n\nexport const selectContacts = state => state.contacts.items;\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectFilter, selectContacts } from 'redux/selectors';\nimport { setFilter, clearFilter } from 'redux/filterSlice';\nimport { fetchContacts, addContact, deleteContact } from 'redux/operations';\n\nexport const useContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const addNewContact = ({ name, number }) => {\n    dispatch(addContact({ name, number }));\n  };\n\n  const removeContact = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const fetchAllContacts = useCallback(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const showFilter = filterValue => {\n    dispatch(setFilter(filterValue));\n  };\n\n  const clearContactFilter = () => {\n    dispatch(clearFilter());\n  };\n\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact && contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return {\n    contacts,\n    filter,\n    filteredContacts,\n    showFilter,\n    clearContactFilter,\n    addNewContact,\n    removeContact,\n    fetchAllContacts,\n  };\n};\n","import { Field, Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useContacts } from 'hooks/useContact';\n\nimport { TextField } from 'formik-mui';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(10, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(2, 'Too Short!')\n    .max(15, 'Too Long!')\n    .required('Required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const { addNewContact, contacts } = useContacts();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      const newName = values.name;\n\n      if (contacts.find(contact => contact.name === newName)) {\n        alert(`${newName} is already in contacts list`);\n        return;\n      }\n\n      addNewContact(values);\n      resetForm();\n    } catch (error) {\n      console.error('Error while handling form submission:', error);\n    }\n  };\n\n  return (\n    <>\n      <h2>Add Contact</h2>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <Box marginY={1} sx={{ width: 350 }}>\n            <Field\n              component={TextField}\n              label=\"Name*\"\n              type=\"text\"\n              name=\"name\"\n              size=\"small\"\n              fullWidth\n              autoFocus\n            />\n          </Box>\n\n          <Box marginY={2} sx={{ width: 350 }}>\n            <Field\n              component={TextField}\n              label=\"Number*\"\n              type=\"tel\"\n              name=\"number\"\n              size=\"small\"\n              fullWidth\n            />\n          </Box>\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            size=\"medium\"\n            sx={{ mb: 7 }}\n          >\n            Add contact\n          </Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { useContacts } from 'hooks/useContact';\n\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport { Box, List, Typography } from '@mui/material';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const { removeContact } = useContacts();\n\n  return (\n    <List>\n      <Box\n        component=\"div\"\n        sx={{ display: { xs: 'flex' }, width: '100%', m: 1 }}\n      >\n        <Box\n          component=\"div\"\n          sx={{\n            display: { xs: 'flex' },\n            flexWrap: 'wrap',\n            flexGrow: 1,\n          }}\n        >\n          <Typography\n            variant=\"span\"\n            sx={{ mr: 4, flexGrow: 1, textAlign: 'left', fontWeight: 'bold' }}\n          >\n            {name}\n          </Typography>\n          <Typography variant=\"span\" sx={{ mr: 1 }}>\n            {number}\n          </Typography>\n        </Box>\n        <HighlightOffIcon\n          sx={{ color: '#000a', cursor: 'pointer' }}\n          onClick={() => removeContact(id)}\n        />\n      </Box>\n    </List>\n  );\n};\n","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\n\nimport { useContacts } from 'hooks/useContact';\n\nimport Box from '@mui/material/Box';\nimport List from '@mui/material/List';\n\nexport const ContactList = () => {\n  const { filteredContacts } = useContacts();\n\n  return (\n    <Box component=\"div\" sx={{ width: '100%', maxWidth: 350 }}>\n      <List>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactListItem key={id} name={name} number={number} id={id} />\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { selectFilter } from 'redux/selectors';\nimport { setFilter } from 'redux/filterSlice';\n\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = event => {\n    console.log('Typed value:', event.target.value);\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      noValidate\n      autoComplete=\"off\"\n      sx={{ width: '100%', maxWidth: 350 }}\n    >\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Find contacts by name\"\n        variant=\"outlined\"\n        type=\"text\"\n        size=\"small\"\n        value={filter}\n        onChange={onFilterChange}\n        fullWidth\n      />\n    </Box>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { ContactForm } from '../ContactForm/ContactForm';\nimport { ContactList } from '../ContactList/ContactList';\nimport { Filter } from '../Filter/Filter';\nimport { useContacts } from 'hooks/useContact';\nimport { Box, Grid } from '@mui/material';\n\nexport const Contacts = () => {\n  const { contacts, fetchAllContacts } = useContacts();\n\n  useEffect(() => {\n    fetchAllContacts();\n  }, [fetchAllContacts]);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"center\">\n      <Box\n        component=\"div\"\n        sx={{ mt: 1, width: '100%', maxWidth: 350, textAlign: 'center' }}\n      >\n        <ContactForm />\n        <h2>Contacts</h2>\n        {contacts && contacts.length !== 0 && <Filter />}\n        <ContactList />\n      </Box>\n    </Grid>\n  );\n};\n","import { Contacts } from 'components/Contacts/Contacts';\nimport React from 'react';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <Contacts />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectFilter","state","filter","value","selectContacts","contacts","items","useContacts","dispatch","useDispatch","useSelector","fetchAllContacts","useCallback","fetchContacts","filteredContacts","contact","name","toLowerCase","includes","showFilter","filterValue","setFilter","clearContactFilter","clearFilter","addNewContact","_ref","number","addContact","removeContact","id","deleteContact","validationSchema","Yup","shape","min","max","required","initialValues","ContactForm","_useContacts","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","resetForm","newName","wrap","_context","prev","next","find","alert","concat","abrupt","t0","console","error","stop","_x","_x2","apply","arguments","_jsxs","_Fragment","children","_jsx","Formik","onSubmit","Form","autoComplete","Box","marginY","sx","width","Field","component","TextField","label","type","size","fullWidth","autoFocus","Button","variant","mb","ContactListItem","List","display","xs","m","flexWrap","flexGrow","Typography","mr","textAlign","fontWeight","HighlightOffIcon","color","cursor","onClick","ContactList","maxWidth","map","Filter","noValidate","onChange","event","log","target","Contacts","useEffect","Grid","container","justifyContent","alignItems","mt","length"],"sourceRoot":""}